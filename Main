print([[
--------------------------------------------------------------------------------------
 ________  ___       _______   _____ ______   ________  _________  ___  ________      
|\   ____\|\  \     |\  ___ \ |\   _ \  _   \|\   __  \|\___   ___\\  \|\   ____\     
\ \  \___|\ \  \    \ \   __/|\ \  \\\__\ \  \ \  \|\  \|___ \  \_\ \  \ \  \___|_    
 \ \  \    \ \  \    \ \  \_|/_\ \  \\|__| \  \ \   __  \   \ \  \ \ \  \ \_____  \   
  \ \  \____\ \  \____\ \  \_|\ \ \  \    \ \  \ \  \ \  \   \ \  \ \ \  \|____|\  \  
   \ \_______\ \_______\ \_______\ \__\    \ \__\ \__\ \__\   \ \__\ \ \__\_________\
    \|_______|\|_______|\|_______|\|__|     \|__|\|__|\|__|    \|__|  \|__|\_________|

                        ___  ___  ___  ___  ________     
                        |\  \|\  \|\  \|\  \|\   __  \    
                        \ \  \\\  \ \  \\\  \ \  \|\ /_   
                         \ \   __  \ \  \\\  \ \   __  \  
                          \ \  \ \  \ \  \\\  \ \  \|\  \ 
                           \ \__\ \__\ \_______\ \_______\
                            \|__|\|__|\|_______|\|_______|
----------------------------------------------------------------------------------------------- --
]])

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:FindFirstChild("HumanoidRootPart")

while not rootPart do
    rootPart = character:FindFirstChild("HumanoidRootPart")
    wait()
end

print("พบ HumanoidRootPart แล้ว!")

game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):CaptureController()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

function getmaincode()
    local characters = "QWERTYUIOPASDFGHJKLZXCVBNM"
    local result = ""
    for i = 1, 1 do
        local randomIndex = math.random(2, #characters)
        result = result .. string.sub(characters, randomIndex, randomIndex)
    end
    return result
end

function getcode()
    local characters = "1234567890"
    local result = ""
    for i = 1, 5 do
        local randomIndex = math.random(2, #characters)
        result = result .. string.sub(characters, randomIndex, randomIndex)
    end
    return result
end

local function startTypingAnimation3()
    local randomText1 = getmaincode()
    local randomText2 = getcode()
    local username = game.Players.LocalPlayer.Character.Name
    random_name = " | Clematis Hub | " .. username .. " | Session : ( "..randomText1.."-"..randomText2.." ) "
end
spawn(startTypingAnimation3)
_G.theme = "Amethyst"
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local MainWindow = Rayfield:CreateWindow({
    Name = random_name,
    Icon = 0,
    LoadingTitle = "Loaded!",
    LoadingSubtitle = "Script By seaweed_hunter",
    Theme = _G.theme,
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Clematis"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Key?",
        Subtitle = "Key on Discord Server",
        Note = "Get Key From Discord",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"NOOOO"}
    }
})

local MainTab = MainWindow:CreateTab("Main")
local InventorySection = MainTab:CreateSection("Inventory")
local SellAllButton = MainTab:CreateButton({
    Name = "Sell All",
    Callback = function()
        game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.processGameItemSold:InvokeServer("SellEverything")
    end,
})

local AutoSellToggle = MainTab:CreateToggle({
    Name = "Auto Sell",
    CurrentValue = false,
    Callback = function(AutoSell)
        if AutoSell then
            _G.AutoSell = true
            while _G.AutoSell do
                game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.processGameItemSold:InvokeServer("SellEverything")
                task.wait(30)
            end
        else
            _G.AutoSell = false
        end
    end
})

local FishingSection = MainTab:CreateSection("Fishing")

local DefaultBobberLocation = Vector3.new(0, 5, 0)

local function ParseVector3(text)
    local success, x, y, z = pcall(function()
        local parts = text:split(",")
        return tonumber(parts[1]), tonumber(parts[2]), tonumber(parts[3])
    end)
    if success and x and y and z then
        return Vector3.new(x, y, z)
    else
        warn("Invalid input for Vector3. Using default value.")
        return DefaultBobberLocation
    end
end

local SellAllButton = MainTab:CreateButton({
    Name = "Press To Set Bobber Position",
    Callback = function()
        local ply = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        DefaultBobberLocation = ParseVector3(ply)
    end,
})

local Input = MainTab:CreateInput({
    Name = "Lock Bobber Position",
    CurrentValue = tostring(DefaultBobberLocation),
    PlaceholderText = "e.g., 0,5,0",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        DefaultBobberLocation = ParseVector3(Text)
    end,
})

local AutoFishToggle = MainTab:CreateToggle({
    Name = "Lock Bobber",
    CurrentValue = false,
    Callback = function(InFishs)
        if InFishs then
            _G.looplockbobber = true
            while _G.looplockbobber do
                wait()
                local chr = game.Players.LocalPlayer.Character
                local tool = chr:FindFirstChildOfClass("Tool")
                if tool and tool:GetAttribute("type") == "Rods" then
                    local ply = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if ply then
                        local targetCFrame = CFrame.new(DefaultBobberLocation)
                        for _, v in pairs(tool:GetDescendants()) do
                            if v.Name == "FakeBobber" or v.Name == "Bobber" then
                                v.CFrame = targetCFrame
                            end
                        end
                    else
                        warn("Cannot find HumanoidRootPart for player.")
                    end
                end
            end
        else
            _G.looplockbobber = false
        end
    end,
})

local AutoFishToggle = MainTab:CreateToggle({
    Name = "Instant Fish Bite",
    CurrentValue = false,
    Callback = function(InFish)
        if InFish then
            _G.instantbite = true
            while _G.instantbite do
                task.wait()
                local chr = game.Players.LocalPlayer.Character
                local tool = chr:FindFirstChildOfClass("Tool")
                if tool and tool:GetAttribute("type") == "Rods" then
                    for _, v in pairs(tool:GetDescendants()) do
                        if v.Name == "FakeBobber" and v:IsA("Instance") and v.Transparency == 1 then
                            wait(0.8)
                            game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.FishBiting:InvokeServer()
                            repeat
                                task.wait(0.1)
                            until v.Transparency == 0 or not _G.instantbite
                        end
                    end
                end
            end
        else
            _G.instantbite = false
        end
    end
})

local AutoFishToggle = MainTab:CreateToggle({
    Name = "Auto Fish",
    CurrentValue = false,
    Callback = function(AutoFish)
        if AutoFish then
            _G.AutoFish = true
            while _G.AutoFish do
                task.wait()
                pcall(function()
                    local chr = game.Players.LocalPlayer.Character
                    if not chr:FindFirstChildOfClass("Tool") or (chr:FindFirstChildOfClass("Tool") and chr:FindFirstChildOfClass("Tool"):GetAttribute("type") ~= "Rods") then
                        local plr = game.Players.LocalPlayer.UserId
                        for i, v in pairs(game:GetService("ReplicatedStorage").ToolsCache[plr]:GetChildren()) do
                            if v:GetAttribute("type") == "Rods" then
                                rod = v
                            end
                        end
                        if rod then
                            game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("EquipTool"):FireServer(rod)
                        end
                    end
                    game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("CastFishingLine"):FireServer()
                end)
                task.wait(1)
                task.spawn(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("FishBiting"):InvokeServer()
                end)
                task.wait(2.1)
                game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("FishCaught"):FireServer()
            end
        else
            _G.AutoFish = false
        end
    end
})

local MobsSection = MainTab:CreateSection("Mobs")

MobMethod = {"Tween", "Teleport"}
DefaultMobMethod = "Teleport"
MobMoveSpeed = {"50", "100", "150", "200"}
DefaultMobMoveSpeed = "150"
LootMethod = {"Tween", "Teleport"}
DefaultLootMethod = "Teleport"

local MobMethodDropdown = MainTab:CreateDropdown({
    Name = "Mob Farm Method",
    Options = MobMethod,
    CurrentOption = DefaultMobMethod,
    MultipleOptions = false,
    Callback = function(option)
        if type(option) == "table" then
            DefaultMobMethod = option[1]
        else
            DefaultMobMethod = option
        end
    end
})

local MobSpeedDropdown = MainTab:CreateDropdown({
    Name = "Mob Move Speed",
    Options = MobMoveSpeed,
    CurrentOption = DefaultMobMoveSpeed,
    MultipleOptions = false,
    Callback = function(option)
        if type(option) == "table" then
            DefaultMobMoveSpeed = option[1]
        else
            DefaultMobMoveSpeed = option
        end
    end
})

local LootMethodDropdown = MainTab:CreateDropdown({
    Name = "Loot Collect Method",
    Options = LootMethod,
    CurrentOption = DefaultLootMethod,
    MultipleOptions = false,
    Callback = function(option)
        if type(option) == "table" then
            DefaultLootMethod = option[1]
        else
            DefaultLootMethod = option
        end
    end
})


local Button = MainTab:CreateButton({
    Name = "Bypass Anti-Mob Damage (Press This First!)",
    Callback = function()
        local mobs = game.workspace
        for i, v in pairs(mobs:GetDescendants()) do
            if v.ClassName == "Model" and v:FindFirstChild("Hitbox") and v.Hitbox:FindFirstChild("TouchInterest") then
                v.Hitbox:FindFirstChild("TouchInterest"):Destroy()
            end
        end
    end
})

local AntiMobToggle = MainTab:CreateToggle({
    Name = "Anti-Mob Damage",
    CurrentValue = false,
    Callback = function(GodMode)
        if GodMode then
            _G.GodMode = true
            while _G.GodMode do
                task.wait()
                pcall(function()
                    local mobs = game.workspace
                    for i, v in pairs(mobs:GetChildren()) do
                        if v.ClassName == "Model" and v:FindFirstChild("Hitbox") and v.Hitbox:FindFirstChild("TouchInterest") then
                            v.Hitbox:FindFirstChild("TouchInterest"):Destroy()
                        end
                    end
                end)
            end
        else
            _G.GodMode = false
        end
    end,
})

local MobHuntToggle = MainTab:CreateToggle({
    Name = "Mob Hunt",
    CurrentValue = false,
    Callback = function(MobHunt)
        if MobHunt then
            _G.MobHunt = true
            task.spawn(function()
                while _G.MobHunt do
                    task.wait()
                    pcall(function()
                        local player = game.Players.LocalPlayer
                        local character = player.Character or player.CharacterAdded:Wait()
                        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                        if not character or not character:FindFirstChild("HumanoidRootPart") then
                            return
                        end
                        local spear = nil
                        for _, tool in pairs(game:GetService("ReplicatedStorage").ToolsCache[player.UserId]:GetChildren()) do
                            if tool:GetAttribute("type") == "Spears" then
                                spear = tool.Name
                            end
                        end

                        if not spear then
                            warn("No spear found for player")
                            return
                        end

                        local nearestMob, shortestDistance = nil, math.huge
                        for _, mob in pairs(workspace:GetChildren()) do
                            if mob:IsA("Model") and mob:FindFirstChild("Hitbox") and mob:FindFirstChild("Health") and _G.MobHunt then
                                local distance = (humanoidRootPart.Position - mob.Hitbox.Position).Magnitude
                                if distance < shortestDistance then
                                    nearestMob = mob
                                    shortestDistance = distance
                                end
                            end
                        end

                        if nearestMob and nearestMob:FindFirstChild("Health") then
                            repeat
                                local destination = nearestMob.Hitbox.CFrame * CFrame.new(0, 20, 0)
                                if DefaultMobMethod == "Tween" then
                                    local tweenService = game:GetService("TweenService")
                                    local distance = (humanoidRootPart.Position - destination.Position).Magnitude
                                    local speed = tonumber(DefaultMobMoveSpeed) or 150
                                    local duration = math.max(distance / speed, 0.1)
                                    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                    local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = destination})
                                    tween:Play()
                                    tween.Completed:Wait()
                                elseif DefaultMobMethod == "Teleport" then
                                    humanoidRootPart.CFrame = destination
                                end
                                game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.SpearThrown:FireServer(
                                    spear,
                                    nearestMob.Hitbox.CFrame,
                                    nearestMob.Hitbox.Position,
                                    os.time() + math.random(100000, 999999)
                                )
                                game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.MonsterHit:FireServer(
                                    nearestMob,
                                    spear,
                                    true
                                )
                                task.wait(2)
                            until nearestMob.Health.Value == 0 or _G.MobHunt == false or nearestMob.Parent == nil
                        end
                    end)
                    while _G.IsLooting do
                        task.wait()
                    end
                end
            end)
        else
            _G.MobHunt = false
        end
    end
})

local LootsToggle = MainTab:CreateToggle({
    Name = "Collect Loots",
    CurrentValue = false,
    Callback = function(Loots)
        if Loots then
            _G.Loots = true
            task.spawn(function()
                while _G.Loots do
                    task.wait()
                    pcall(function()
                        local player = game.Players.LocalPlayer
                        local character = player.Character or player.CharacterAdded:Wait()
                        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                        if not character or not character:FindFirstChild("HumanoidRootPart") then
                            return
                        end
                        local droppedItems = game:GetService("Workspace"):FindFirstChild("DroppedItems")
                        if not droppedItems then
                            return
                        end
                        for _, loot in pairs(droppedItems:GetChildren()) do
                            if loot:IsA("Model") and loot.PrimaryPart and loot.PrimaryPart.Transparency < 1 then
                                local destination = loot.PrimaryPart.CFrame
                                if DefaultLootMethod == "Tween" then
                                    local tweenService = game:GetService("TweenService")
                                    local distance = (humanoidRootPart.Position - destination.Position).Magnitude
                                    local duration = distance / tonumber(DefaultMobMoveSpeed or 150)
                                    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                    local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = destination})
                                    tween:Play()
                                    tween.Completed:Wait()
                                elseif DefaultLootMethod == "Teleport" then
                                    humanoidRootPart.CFrame = destination
                                end
                                repeat
                                    wait(1)
                                    _G.IsLooting = true
                                    local player = game.Players.LocalPlayer
                                    local character = player.Character or player.CharacterAdded:Wait()
                                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                                    local droppedItems = game:GetService("Workspace"):FindFirstChild("DroppedItems")
                                    for _, loot in pairs(droppedItems:GetChildren()) do
                                        if loot:IsA("Model") and loot.PrimaryPart and loot.PrimaryPart.Transparency < 1 then
                                            local destination = loot.PrimaryPart.CFrame
                                    if DefaultLootMethod == "Tween" then
                                        local tweenService = game:GetService("TweenService")
                                        local distance = (humanoidRootPart.Position - destination.Position).Magnitude
                                        local duration = distance / tonumber(DefaultMobMoveSpeed or 150)
                                        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                        local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = destination})
                                        tween:Play()
                                        tween.Completed:Wait()
                                    elseif DefaultLootMethod == "Teleport" then
                                        humanoidRootPart.CFrame = destination
                                    end
                                end
                            end
                                until not loot:IsDescendantOf(droppedItems) or not _G.Loots or loot.PrimaryPart.Transparency > 1
                                _G.IsLooting = false
                            end
                        end
                    end)
                end
            end)
        else
            _G.Loots = false
        end
    end
})




local ChestsSection = MainTab:CreateSection("Loot Chest")

local LootChestMethod = {"Teleport", "Tween"}
local DefaultLootChestMethod = "Teleport"
local LootChestSpeed = {"50", "100", "150", "200"}
local DefaultLootChestSpeed = "150"

local LootMethodDropdown = MainTab:CreateDropdown({
    Name = "Loot Chest Method",
    Options = LootChestMethod,
    CurrentOption = DefaultLootChestMethod,
    MultipleOptions = false,
    Callback = function(option)
        if type(option) == "table" then
            DefaultLootChestMethod = option[1]
        else
            DefaultLootChestMethod = option
        end
    end
})

local LootMethodDropdown = MainTab:CreateDropdown({
    Name = "Loot Chest Tween Speed",
    Options = LootChestSpeed,
    CurrentOption = DefaultLootChestSpeed,
    MultipleOptions = false,
    Callback = function(option)
        if type(option) == "table" then
            DefaultLootChestSpeed = option[1]
        else
            DefaultLootChestSpeed = option
        end
    end
})

local ChestToggle = MainTab:CreateToggle({
    Name = "Get All Chests",
    CurrentValue = false,
    Callback = function(chest)
        if chest then
            _G.chest = true
            while _G.chest do
                task.wait()
                pcall(function()
                    for i, v in pairs(workspace:GetDescendants()) do
                        if v.ClassName == "ProximityPrompt" and v.Parent.Name == "HumanoidRootPart" and not v.Parent.Parent:GetAttribute("OpenParticlesType") and v.Enabled and v.ActionText == "Open" and _G.chest then
                            repeat
                                task.wait()
                                if DefaultLootChestMethod == "Tween" then
                                    local destination = v.Parent.CFrame
                                    local tweenService = game:GetService("TweenService")
                                    local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - destination.Position).Magnitude
                                    local speed = tonumber(DefaultLootChestSpeed) or 150
                                    local duration = math.max(distance / speed, 0.1)
                                    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                    local tween = tweenService:Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = destination})
                                    tween:Play()
                                    tween.Completed:Wait()
                                elseif DefaultLootChestMethod == "Teleport" then
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Parent.CFrame
                                end
                                fireproximityprompt(v)
                            until v.Enabled == false or _G.chest == false
                        end
                    end
                end)
            end
        else
            _G.chest = false
        end
    end,
})

local ChestToggle = MainTab:CreateToggle({
    Name = "Get Ship Treasure",
    CurrentValue = false,
    Callback = function(tchest)
        if tchest then
            _G.tchest = true
            task.spawn(function()
                while _G.tchest do
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                    if not humanoidRootPart then
                        task.wait(1)
                        return
                    end
                    for _, ship in pairs(workspace:GetChildren()) do
                        if ship:IsA("Model") and ship:FindFirstChildOfClass("Model") then
                            for _, chest in pairs(ship:GetChildren()) do
                                if chest:IsA("Model") and chest:FindFirstChild("Gold") then
                                    local gold = chest:FindFirstChild("Gold")
                                    local proximityPrompt = chest:FindFirstChild("HumanoidRootPart"):FindFirstChild("ProximityPrompt")
                                    
                                    if gold and gold:IsA("BasePart") and proximityPrompt then
                                        if DefaultLootChestMethod == "Tween" then
                                            local destination = gold.CFrame
                                            local tweenService = game:GetService("TweenService")
                                            local distance = (humanoidRootPart.Position - destination.Position).Magnitude
                                            local speed = tonumber(DefaultLootChestSpeed) or 150
                                            local duration = math.max(distance / speed, 0.1)
                                            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                            local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = destination})
                                            tween:Play()
                                            tween.Completed:Wait()
                                        elseif DefaultLootChestMethod == "Teleport" then
                                            humanoidRootPart.CFrame = gold.CFrame
                                        end
                                        task.wait(0.5)
                                        pcall(function()
                                            proximityPrompt:InputHoldBegin()
                                            task.wait(1)
                                            proximityPrompt:InputHoldEnd()
                                        end)
                                        break
                                    end
                                end
                            end
                        end
                    end
                    task.wait(1)
                end
            end)
        else
            _G.tchest = false
        end
    end,
})


local TweenService = game:GetService("TweenService")
 local TpMethods = {"Instant", "Tween"}
 local DefaultTp = "Unknown"
 local Location = {
     "Port Jackson", "Eruption Island", "Shadow Isles", "Ancient Shores", "Pharaoh's Dunes", "Monster's Borough 1", "Monster's Borough 2", "Monster's Borough 3"
 }
 local DefaultLocation = "Unknown"
 local TweenSpeed = 100
 local LocationPositions = {
     ["Port Jackson"] = CFrame.new(-3, 55, -125),
     ["Eruption Island"] = CFrame.new(3023, 52, 1323),
     ["Shadow Isles"] = CFrame.new(2197, 43, -2216),
     ["Ancient Shores"] = CFrame.new(-2436, 41, -1683),
     ["Pharaoh's Dunes"] = CFrame.new(-4143, 46, 262),
     ["Monster's Borough 1"] = CFrame.new(-3248, 46, 2732),
     ["Monster's Borough 2"] = CFrame.new(-905, 46, 3052),
     ["Monster's Borough 3"] = CFrame.new(-1571, 88, 1172)
 }
 local TeleportTab = MainWindow:CreateTab("Teleport")
 local Dropdown = TeleportTab:CreateDropdown({
     Name = "Location",
     Options = Location,
     CurrentOption = "Unknown",
     MultipleOptions = false,
     Callback = function(option)
         if type(option) == "table" then
             DefaultLocation = option[1]
         else
             DefaultLocation = option
         end
         DefaultLocationPosition = LocationPositions[DefaultLocation] or CFrame.new()
         print("Selected Location: ", DefaultLocation)
         Rayfield:Notify({
             Title = "Location Selected",
             Content = "You have selected: " .. DefaultLocation,
             Duration = 6.5,
             Image = "location-pin",
         })
     end
 })
 
 
 local Dropdown = TeleportTab:CreateDropdown({
     Name = "Teleport Method",
     Options = TpMethods,
     CurrentOption = "Unknown",
     MultipleOptions = false,
     Callback = function(option)
         if type(option) == "table" then
             DefaultTp = option[1]
         else
             DefaultTp = option
         end
         print("Selected Teleport Method: ", DefaultTp)
         Rayfield:Notify({
             Title = "Teleport Method",
             Content = DefaultTp,
             Duration = 6.5,
             Image = "alarm-clock",
         })
     end
 })

 local Slider = TeleportTab:CreateSlider({
     Name = "Tween Speed",
     Range = {20, 190},
     Increment = 5,
     Suffix = "Speed",
     CurrentValue = 90,
     Flag = "Slider1",
     Callback = function(Value)
         if type(Value) == "table" then
             TweenSpeed = Value[1]
         else
             TweenSpeed = Value
         end
     end,
 })
 
local Button = TeleportTab:CreateButton({
    Name = "Press to Teleport",
    Callback = function()
        if DefaultTp == "Instant" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = DefaultLocationPosition
        elseif DefaultTp == "Tween" then
            local destination = DefaultLocationPosition
            local character = game.Players.LocalPlayer.Character
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            if humanoidRootPart and character:FindFirstChild("Humanoid") then
                local distance = (humanoidRootPart.Position - destination.Position).Magnitude
                local duration = distance / TweenSpeed
                local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = destination})
                tween:Play()
                tween.Completed:Wait()
                humanoidRootPart.CFrame = destination
            end
        end
    end
})


local Section = TeleportTab:CreateSection("Shop")
local Button = TeleportTab:CreateButton({
    Name = "Petricia's Pet",
    Callback = function()
local args = {
    [1] = "PetShop",
    [2] = "MainEntrance"
}
game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.EnterDoor:InvokeServer(unpack(args))

    end
})

local Button = TeleportTab:CreateButton({
    Name = "Tavern Interior",
    Callback = function()
local args = {
    [1] = "TavernInterior",
    [2] = "Inside"
}
game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.EnterDoor:InvokeServer(unpack(args))

    end
})

local Button = TeleportTab:CreateButton({
    Name = "Supplies Store Interior",
    Callback = function()
local args = {
    [1] = "SuppliesStoreInterior",
    [2] = "Inside"
}

game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.EnterDoor:InvokeServer(unpack(args))

    end
})

local Button = TeleportTab:CreateButton({
    Name = "Boat Shop Interior",
    Callback = function()
local args = {
    [1] = "BoatShopInterior",
    [2] = "Inside"
}

game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.EnterDoor:InvokeServer(unpack(args))

    end
})

local chests = {"stonechest", "silverchest", "goldchest", "timberchest", "crownchest", "elvenchest"}
local selectchest = "Unknown"

local Ramdomy = MainWindow:CreateTab("Gacha")
local Section = Ramdomy:CreateSection("Buy Chest")
local Dropdown = Ramdomy:CreateDropdown({
    Name = "Chest Selected",
    Options = chests,
    CurrentOption = selectchest,
    MultipleOptions = false,
    Callback = function(option)
        if type(option) == "table" then
            selectchest = option[1]
        else
            selectchest = option
        end
        Rayfield:Notify({
            Title = "Selected Chest",
            Content = selectchest,
            Duration = 6.5,
            Image = "alarm-clock",
        })
    end
})

local Button = Ramdomy:CreateButton({
    Name = "Random Skin",
    Callback = function()

local args = {
    [1] = selectchest,
    [2] = false
}

game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.OpenLootboxFunction:InvokeServer(unpack(args))

    end
})

local Section = Ramdomy:CreateSection("Buy Pet Egg")

local petegg = {"normalegg", "royalegg", "rubyegg", "voidegg"}
local selectpet = "Unknown"
local Dropdown = Ramdomy:CreateDropdown({
    Name = "Egg Selected",
    Options = petegg,
    CurrentOption = selectpet,
    MultipleOptions = false,
    Callback = function(option)
        if type(option) == "table" then
            selectpet = option[1]
        else
            selectpet = option
        end
        Rayfield:Notify({
            Title = "Selected Chest",
            Content = selectpet,
            Duration = 6.5,
            Image = "alarm-clock",
        })
    end
})

local Button = Ramdomy:CreateButton({
    Name = "Random Pet",
    Callback = function()

local args = {
    [1] = selectpet,
    [2] = false
}

game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.OpenLootboxFunction:InvokeServer(unpack(args))


    end
})


local Ramdomy = MainWindow:CreateTab("Quest")
local Section = Ramdomy:CreateSection("Crystal Cave")

local Button = Ramdomy:CreateButton({
    Name = "Unlock Crystal Cave",
    Callback = function()
        local args = {
            [1] = {
                ["funcName"] = "leverActivated",
                ["num"] = 1
            }
        }
        
        game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.PortJacksonQuestFunc:InvokeServer(unpack(args))
    end
})

local Button = Ramdomy:CreateButton({
    Name = "Enter Crystal Cave",
    Callback = function()
        local args = {
            [1] = "PortJacksonMine",
            [2] = "PJSFAEntranceCover"
        }
        
        game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.EnterDoor:InvokeServer(unpack(args))
    end
})

_G.searcherayfield = true
local foundray = false
while _G.searcherayfield and not foundray do
    task.wait(1)
    local coreGui = game:GetService("CoreGui")
    for _, v in pairs(coreGui:GetDescendants()) do
        if v.Name == "Rayfield" then
            local rayfie = v
            foundray = true
            _G.searcherayfield = false
            rayfie.Enabled = false
            local player = game:GetService("Players").LocalPlayer
            local playerGui = player:FindFirstChild("PlayerGui")
            if not playerGui then
                warn("PlayerGui not found!")
                return
            end

            local screenGui = Instance.new("ScreenGui")
            screenGui.Name = "ToggleRayfield"
            screenGui.Parent = playerGui

            local shadowframe = Instance.new("Frame")
            shadowframe.Size = UDim2.new(0, 100, 0, 100)
            shadowframe.Position = UDim2.new(0.015, 0, 0.2, 0)
            shadowframe.BackgroundTransparency = 0.8
            shadowframe.BorderSizePixel = 0
            shadowframe.BackgroundColor3 = Color3.fromRGB(153, 102, 204)
            shadowframe.Parent = screenGui

            local shadowcorner = Instance.new("UICorner")
            shadowcorner.CornerRadius = UDim.new(0.2, 0)
            shadowcorner.Parent = shadowframe

            local shadowbutton = Instance.new("ImageButton")
            shadowbutton.Size = UDim2.new(1, 0, 1, 0)
            shadowbutton.BackgroundTransparency = 1
            shadowbutton.Image = "http://www.roblox.com/asset/?id=83415391084673"
            shadowbutton.ImageColor3 = Color3.fromRGB(0,0,0)
            shadowbutton.Parent = shadowframe

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(0, 100, 0, 100)
            frame.Position = UDim2.new(0.015, 0, 0.2, 0)
            frame.BackgroundTransparency = 0.5
            frame.BorderSizePixel = 0
            frame.BackgroundColor3 = Color3.fromRGB(153, 102, 204)
            frame.Parent = screenGui

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0.2, 0)
            corner.Parent = frame

            local button = Instance.new("ImageButton")
            button.Size = UDim2.new(1, 0, 1, 0)
            button.BackgroundTransparency = 1
            button.Image = "http://www.roblox.com/asset/?id=83415391084673"
            button.ImageColor3 = Color3.fromRGB(255, 255, 255)
            button.Parent = frame
            

            local isEnabled = false
            button.MouseButton1Click:Connect(function()
                isEnabled = not isEnabled
                rayfie.Enabled = isEnabled
                local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                local goal = {Size = UDim2.new(0, 120, 0, 120)}
                local tween = game:GetService("TweenService"):Create(button, tweenInfo, goal)
                tween:Play()
                tween.Completed:Connect(function()
                    local returnTween = game:GetService("TweenService"):Create(button, tweenInfo, {Size = UDim2.new(0, 100, 0, 100)})
                    returnTween:Play()
                end)
            end)
            local dragging = false
            local dragInput, mousePos, buttonPos
            local userInputService = game:GetService("UserInputService")

            button.InputBegan:Connect(function(input, gameProcessedEvent)
                if gameProcessedEvent then return end
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    mousePos = input.Position
                    buttonPos = button.Position
                end
            end)

            button.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local delta = input.Position - mousePos
                    button.Position = UDim2.new(buttonPos.X.Scale, buttonPos.X.Offset + delta.X, buttonPos.Y.Scale, buttonPos.Y.Offset + delta.Y)
                end
            end)

            button.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)
            break
        end
    end
end

Rayfield:LoadConfiguration()
