print([[
--------------------------------------------------------------------------------------
 ________  ___       _______   _____ ______   ________  _________  ___  ________      
|\   ____\|\  \     |\  ___ \ |\   _ \  _   \|\   __  \|\___   ___\\  \|\   ____\     
\ \  \___|\ \  \    \ \   __/|\ \  \\\__\ \  \ \  \|\  \|___ \  \_\ \  \ \  \___|_    
 \ \  \    \ \  \    \ \  \_|/_\ \  \\|__| \  \ \   __  \   \ \  \ \ \  \ \_____  \   
  \ \  \____\ \  \____\ \  \_|\ \ \  \    \ \  \ \  \ \  \   \ \  \ \ \  \|____|\  \  
   \ \_______\ \_______\ \_______\ \__\    \ \__\ \__\ \__\   \ \__\ \ \__\_________\
    \|_______|\|_______|\|_______|\|__|     \|__|\|__|\|__|    \|__|  \|__|\_________|

                        ___  ___  ___  ___  ________     
                        |\  \|\  \|\  \|\  \|\   __  \    
                        \ \  \\\  \ \  \\\  \ \  \|\ /_   
                         \ \   __  \ \  \\\  \ \   __  \  
                          \ \  \ \  \ \  \\\  \ \  \|\  \ 
                           \ \__\ \__\ \_______\ \_______\
                            \|__|\|__|\|_______|\|_______|
----------------------------------------------------------------------------------------------- --
]])

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:FindFirstChild("HumanoidRootPart")

while not rootPart do
    rootPart = character:FindFirstChild("HumanoidRootPart")
    wait()
end

game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):CaptureController()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

function getmaincode()
    local characters = "QWERTYUIOPASDFGHJKLZXCVBNM"
    local result = ""
    for i = 1, 1 do
        local randomIndex = math.random(2, #characters)
        result = result .. string.sub(characters, randomIndex, randomIndex)
    end
    return result
end

function getcode()
    local characters = "1234567890"
    local result = ""
    for i = 1, 5 do
        local randomIndex = math.random(2, #characters)
        result = result .. string.sub(characters, randomIndex, randomIndex)
    end
    return result
end

local function startTypingAnimation3()
    local randomText1 = getmaincode()
    local randomText2 = getcode()
    local username = game.Players.LocalPlayer.Character.Name
    random_name = " | Clematis Hub | " .. username .. " | Session : ( "..randomText1.."-"..randomText2.." ) "
end
spawn(startTypingAnimation3)

local usernames = game.Players.LocalPlayer.Character.Name
local pid = tostring(game.PlaceId)

print("Loading Lib")
_G.theme = "Amethyst"
wait(0.2)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
print("Ui Lib Loaded")
wait(1)
print("Loading Function")
local MainWindow = Rayfield:CreateWindow({
    Name = random_name or "Clematis Hub | Err Loading | Session : ( Error! )",
    Icon = 0,
    LoadingTitle = "Loading!",
    LoadingSubtitle = "Script By Seaweed_hunter",
    Theme = _G.theme,
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ClematisHub",
        FileName = usernames .. "_SavedConfig_" .. pid
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Key?",
        Subtitle = "Key on Discord Server",
        Note = "Get Key From Discord",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"NOOOO"}
    }
})

_G.AutoSellDelay = 30
_G.FishCaughtDelay = 2.1
_G.ClickFishV2Delay = 0.35
_G.ClickFishV2Time = 7

local MainTab = MainWindow:CreateTab("Auto Farm")
local InventorySection = MainTab:CreateSection("Inventory")
local SellAllButton = MainTab:CreateButton({
    Name = "Sell All",
    Callback = function()
        game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.processGameItemSold:InvokeServer("SellEverything")
    end,
})

AutoSell = false
local AutoSellToggle = MainTab:CreateToggle({
    Name = "Auto Sell",
    CurrentValue = false,
    Flag = "Auto Sell",
    Callback = function(Value)
        AutoSell = Value
        if AutoSell then
            while AutoSell do
                game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.processGameItemSold:InvokeServer("SellEverything")
                task.wait(_G.AutoSellDelay)
            end
        end
    end
})

local FishingSection = MainTab:CreateSection("Fishing")

instantbite = false
local AutoFishToggle = MainTab:CreateToggle({
    Name = "Instant Fish Bite",
    CurrentValue = false,
    Flag = "InsFish",
    Callback = function(Value)
        instantbite = Value
        if instantbite then
            while instantbite do
                task.wait()
                local chr = game.Players.LocalPlayer.Character
                local tool = chr:FindFirstChildOfClass("Tool")
                if tool and tool:GetAttribute("type") == "Rods" then
                    for _, v in pairs(tool:GetDescendants()) do
                        if v.Name == "FakeBobber" and v:IsA("Instance") and v.Transparency == 1 then
                            wait(0.8)
                            game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.FishBiting:InvokeServer()
                            repeat
                                task.wait(0.1)
                            until v.Transparency == 0 or not instantbite
                        end
                    end
                end
            end
        end
    end
})

AutoFish = false
local AutoFishToggle = MainTab:CreateToggle({
    Name = "Auto Fish",
    CurrentValue = false,
    Flag = "AutoFish",
    Callback = function(Value)
        AutoFish = Value
        if AutoFish then
            while AutoFish do
                task.wait()
                pcall(function()
                    local args = {
                        [1] = 1
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("SetEquippedItem"):InvokeServer(unpack(args))                    
                    local chr = game.Players.LocalPlayer.Character
                    if not chr:FindFirstChildOfClass("Tool") or (chr:FindFirstChildOfClass("Tool") and chr:FindFirstChildOfClass("Tool"):GetAttribute("type") ~= "Rods") then
                        local plr = game.Players.LocalPlayer.UserId
                        for i, v in pairs(game:GetService("ReplicatedStorage").ToolsCache[plr]:GetChildren()) do
                            if v:GetAttribute("type") == "Rods" then
                                rod = v
                            end
                        end
                        if rod then
                            game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("EquipTool"):FireServer(rod)
                        end
                    end
                    game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("CastFishingLine"):FireServer()
                end)
                task.wait(1)
                task.spawn(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("FishBiting"):InvokeServer()
                end)
                task.wait(_G.FishCaughtDelay)
                game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("FishCaught"):FireServer()
            end
        end
    end
})

local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer
local screenGui = CoreGui:FindFirstChild("CrosshairGui")

if not screenGui then
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CrosshairGui"
    screenGui.Parent = CoreGui

    local crosshair = Instance.new("ImageLabel")
    crosshair.Size = UDim2.new(0, 45, 0, 45)
    crosshair.Position = UDim2.new(0.5, -5, 0.5, 260)
    crosshair.BackgroundTransparency = 1
    crosshair.Image = "rbxassetid://103448393060927"
    crosshair.Parent = screenGui
    
    local dragging, dragInput, dragStart, startPos

    local function Update(input)
        local delta = input.Position - dragStart
        crosshair.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end

    local function StartDrag(input)
        dragging = true
        dragStart = input.Position
        startPos = crosshair.Position
    end

    local function StopDrag()
        dragging = false
    end

    crosshair.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            StartDrag(input)
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    StopDrag()
                end
            end)
        end
    end)

    crosshair.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            Update(input)
        end
    end)
end

local function endClick()
    local crosshair = screenGui:FindFirstChildOfClass("ImageLabel")
    if crosshair then
        local midX, midY = crosshair.AbsolutePosition.X + 10, crosshair.AbsolutePosition.Y + 10
        VirtualInputManager:SendMouseButtonEvent(midX, midY, 0, true, game, 0)
        wait(0.1)
        VirtualInputManager:SendMouseButtonEvent(midX, midY, 0, false, game, 0)
    end
end

local function automacro()
    local crosshair = screenGui:FindFirstChildOfClass("ImageLabel")
    if crosshair then
        for i = 1, _G.ClickFishV2Time do
            local midX, midY = crosshair.AbsolutePosition.X + 10, crosshair.AbsolutePosition.Y + 10
            VirtualInputManager:SendMouseButtonEvent(midX, midY, 0, true, game, 0)
            wait(_G.ClickFishV2Delay)
            VirtualInputManager:SendMouseButtonEvent(midX, midY, 0, false, game, 0)
        end
    end
end

autofishv2 = false
clicked = false
local AutoFishV2Toggle = MainTab:CreateToggle({
    Name = "Auto Fish V2",
    CurrentValue = false,
    Flag = "autofishv2",
    Callback = function(Value)
        autofishv2 = Value
        if not autofishv2 then
            clicked = false
            game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("SetEquippedItem"):InvokeServer()
        end
        
        if autofishv2 then
            pcall(function()
                while autofishv2 do
                    local args = {
                        [1] = 1
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("SetEquippedItem"):InvokeServer(unpack(args))
                    wait(0.5)
                    local chr = player.Character
                    local tool = chr and chr:FindFirstChildOfClass("Tool")

                    if not tool then
                        clicked = false
                        return
                    end

                    task.spawn(function()
                        if not clicked then
                            endClick()
                            clicked = true
                        end
                    end)

                    if tool and tool:GetAttribute("type") == "Rods" then
                        local startTime = nil
                        for _, v in pairs(tool:GetDescendants()) do
                            if v.Name == "FakeBobber" and v:IsA("Instance") then
                                if v.Transparency == 1 then
                                    if not startTime then
                                        startTime = tick()
                                    end

                                    wait(0.8)
                                    task.spawn(function()
                                        wait(0.18)
                                        endClick()
                                    end)

                                    ReplicatedStorage.CloudFrameShared.DataStreams.FishBiting:InvokeServer()
                                    automacro()

                                    repeat 
                                        wait(0.1)

                                        if v == nil then
                                            startTime = nil
                                            print("Casting is nil reset")
                                            
                                            game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("SetEquippedItem"):InvokeServer()
                                            
                                            autofishv2 = false
                                            wait(1)
                                            autofishv2 = true
                                            break
                                        end
              
                                        if tick() - startTime > 30 then
                                            v.Transparency = 0
                                            startTime = nil
                                            print("Casting too long reset")
                                        
                                            game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("SetEquippedItem"):InvokeServer()
                                            
                                            autofishv2 = false
                                            wait(1)
                                            autofishv2 = true 
                                            break 
                                        end
                                    until v.Transparency == 0 or not autofishv2

                                    clicked = false
                                    game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("SetEquippedItem"):InvokeServer()
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
})

local GhostingSection = MainTab:CreateSection("Ghost Mode")
local ghostpart = Instance.new("Part")
ghostpart.Name = "ghostpart"
ghostpart.Size = Vector3.new(1, 1, 1)
ghostpart.Transparency = 0.5
ghostpart.Anchored = true
ghostpart.CanCollide = false
ghostpart.Parent = game.Workspace

defaultPlace2Farm = CFrame.new(-328.689301, 40.8272858, 164.885468, 1, 0, 0, 0, 1, 0, 0, 0, 1)
local Place2Farm = MainTab:CreateDropdown({
    Name = "Ghost Location",
    Options = {"Smuggerler's Bay", "Nidhogg's Reach", "Ocean"},
    CurrentOption = "Port Jackson",
    MultipleOptions = false,
    Flag = "SelectedPlace",
    Callback = function(Options)
        defaultPlace2Farm = Options[1]
        if defaultPlace2Farm == "Smuggerler's Bay" then
            location2farm = CFrame.new(-328.689301, 40.8272858, 164.885468, 1, 0, 0, 0, 1, 0, 0, 0, 1)
        elseif defaultPlace2Farm == "Nidhogg's Reach" then
            location2farm = CFrame.new(2326.70288, 37.0834923, -459.469177, 1, 0, 0, 0, 1, 0, 0, 0, 1)
        elseif defaultPlace2Farm == "Ocean" then
            location2farm = CFrame.new(3142.30298, 40.1806755, -1634.68103, 1, 0, 0, 0, 1, 0, 0, 0, 1)
        end
        
        ghostpart.CFrame = location2farm
        print("Selected Place to farm: " .. defaultPlace2Farm)
    end,
})

Ghosting = false
local originalPart0
local GhostMode = MainTab:CreateToggle({
    Name = "Ghost Mode",
    CurrentValue = false,
    Flag = "Ghost",
    Callback = function(Value)
        Ghosting = Value
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rightWrist = character:FindFirstChild("RightWrist", true)

        if rightWrist and rightWrist:IsA("Motor6D") then
            if Ghosting then
                originalPart0 = rightWrist.Part0
                rightWrist.Part0 = ghostpart
            else
                if originalPart0 then
                    rightWrist.Part0 = originalPart0
                else
                    warn("ไม่สามารถคืนค่า RightWrist ได้ เนื่องจากไม่มีค่าเดิม!")
                end
            end
        else
            warn("ไม่พบ RightWrist หรือ RightWrist ไม่ใช่ Motor6D!")
        end
    end
})


local HandFishing = MainTab:CreateButton({
    Name = "Bring Ghost",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            ghostpart.CFrame = humanoidRootPart.CFrame
        else
            warn("ไม่พบ HumanoidRootPart!")
        end
    end,
})

local MobsSection = MainTab:CreateSection("Mobs")

MobMethod = {"Tween", "Teleport"}
DefaultMobMethod = "Teleport"
MobMoveSpeed = {"50", "100", "150", "200"}
DefaultMobMoveSpeed = "150"
LootMethod = {"Tween", "Teleport"}
DefaultLootMethod = "Teleport"

local MobMethodDropdown = MainTab:CreateDropdown({
    Name = "Mob Farm Method",
    Options = MobMethod,
    CurrentOption = DefaultMobMethod,
    MultipleOptions = false,
    Flag = "MobMethod",
    Callback = function(option)
        if type(option) == "table" then
            DefaultMobMethod = option[1]
        else
            DefaultMobMethod = option
        end
    end
})

local MobSpeedDropdown = MainTab:CreateDropdown({
    Name = "Mob Move Speed",
    Options = MobMoveSpeed,
    CurrentOption = DefaultMobMoveSpeed,
    MultipleOptions = false,
    Flag = "MobSpeed",
    Callback = function(option)
        if type(option) == "table" then
            DefaultMobMoveSpeed = option[1]
        else
            DefaultMobMoveSpeed = option
        end
    end
})

local LootMethodDropdown = MainTab:CreateDropdown({
    Name = "Loot Collect Method",
    Options = LootMethod,
    CurrentOption = DefaultLootMethod,
    MultipleOptions = false,
    Flag = "LootMethod",
    Callback = function(option)
        if type(option) == "table" then
            DefaultLootMethod = option[1]
        else
            DefaultLootMethod = option
        end
    end
})

GodMode = false
AttackBypass = false
local AntiMobToggle = MainTab:CreateToggle({
    Name = "Anti-Mob Damage",
    CurrentValue = false,
    Flag = "Antimob",
    Callback = function(Value)
        GodMode = Value
        if GodMode then
            spawn(function()
                if not AttackBypass then
                    local mobs = game.workspace
                    for i, v in pairs(mobs:GetDescendants()) do
                        if v.ClassName == "Model" and v:FindFirstChild("Hitbox") and v.Hitbox:FindFirstChild("TouchInterest") then
                            v.Hitbox.TouchInterest:Destroy()
                        end
                    end
                    wait(5)
                    for i, v in pairs(mobs:GetDescendants()) do
                        if v.ClassName == "Model" and v:FindFirstChild("Hitbox") and v.Hitbox:FindFirstChild("TouchInterest") then
                            v.Hitbox.TouchInterest:Destroy()
                            AttackBypass = true
                        end
                    end
                end

                while GodMode do
                    task.wait(0.2)
                    pcall(function()
                        local mobs = game.workspace
                        for i, v in pairs(mobs:GetChildren()) do
                            if v.ClassName == "Model" and v:FindFirstChild("Hitbox") and v.Hitbox:FindFirstChild("TouchInterest") then
                                v.Hitbox.TouchInterest:Destroy()
                            end
                        end
                    end)
                end
            end)
        end
    end,
})

GettingShipTreasure = false
GettingAllChest = false

MobHunt = false
local MobHuntToggle = MainTab:CreateToggle({
    Name = "Mob Hunt",
    CurrentValue = false,
    Flag = "HuntMob",
    Callback = function(Value)
        MobHunt = Value
        if MobHunt then
            task.spawn(function()
                while MobHunt do
                    task.wait()
                    pcall(function()
                        IsLooting = false
                        if GettingShipTreasure or GettingAllChest then
                            return
                        end
                        local player = game.Players.LocalPlayer
                        local character = player.Character or player.CharacterAdded:Wait()
                        if not character or not character:FindFirstChild("HumanoidRootPart") then
                            return
                        end
                        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                        local spear = nil
                        for _, tool in pairs(game:GetService("ReplicatedStorage").ToolsCache[player.UserId]:GetChildren()) do
                            if tool:GetAttribute("type") == "Spears" then
                                spear = tool.Name
                            end
                        end

                        if not spear then
                            warn("No spear found for player")
                            return
                        end

                        local nearestMob, shortestDistance = nil, math.huge
                        for _, mob in pairs(workspace:GetChildren()) do
                            if mob:IsA("Model") and mob:FindFirstChild("Hitbox") and mob:FindFirstChild("Health") and MobHunt then
                                local distance = (humanoidRootPart.Position - mob.Hitbox.Position).Magnitude
                                if distance < shortestDistance then
                                    nearestMob = mob
                                    shortestDistance = distance
                                end
                            end
                        end

                        if nearestMob and nearestMob:FindFirstChild("Health") then
                            repeat
                                if not character or not character:FindFirstChild("HumanoidRootPart") then
                                    return
                                end
                                local destination = nearestMob.Hitbox.CFrame * CFrame.new(0, 20, 0)
                                if DefaultMobMethod == "Tween" then
                                    local tweenService = game:GetService("TweenService")
                                    local distance = (humanoidRootPart.Position - destination.Position).Magnitude
                                    local speed = tonumber(DefaultMobMoveSpeed) or 150
                                    local duration = math.max(distance / speed, 0.1)
                                    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                    local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = destination})
                                    tween:Play()
                                    tween.Completed:Wait()
                                elseif DefaultMobMethod == "Teleport" then
                                    humanoidRootPart.CFrame = destination
                                end
                                game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.SpearThrown:FireServer(
                                    spear,
                                    nearestMob.Hitbox.CFrame,
                                    nearestMob.Hitbox.Position,
                                    os.time() + math.random(100000, 999999)
                                )
                                game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.MonsterHit:FireServer(
                                    nearestMob,
                                    spear,
                                    true
                                )
                                task.wait(2)
                            until nearestMob.Health.Value == 0 or MobHunt == false or nearestMob.Parent == nil
                        end
                    end)
                    while IsLooting do
                        task.wait()
                    end
                end
            end)
        end
    end
})

Loots = false
local LootsToggle = MainTab:CreateToggle({
    Name = "Collect Loots",
    CurrentValue = false,
    Flag = "Collect Loots",
    Callback = function(Value)
        Loots = Value
        if Loots then
            task.spawn(function()
                while Loots do
                    task.wait()
                    pcall(function()
                        local player = game.Players.LocalPlayer
                        local character = player.Character or player.CharacterAdded:Wait()
                        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                        if not character or not character:FindFirstChild("HumanoidRootPart") then
                            return
                        end
                        if GettingShipTreasure or GettingAllChest then
                            return
                        end
                        local droppedItems = game:GetService("Workspace"):FindFirstChild("DroppedItems")
                        if not droppedItems then
                            return
                        end
                        for _, loot in pairs(droppedItems:GetChildren()) do
                            if not character or not character:FindFirstChild("HumanoidRootPart") then
                                return
                            end
                            if loot:IsA("Model") and loot.PrimaryPart and loot.PrimaryPart.Transparency < 1 then
                                local destination = loot.PrimaryPart.CFrame
                                if DefaultLootMethod == "Tween" then
                                    local tweenService = game:GetService("TweenService")
                                    local distance = (humanoidRootPart.Position - destination.Position).Magnitude
                                    local duration = distance / tonumber(DefaultMobMoveSpeed or 150)
                                    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                    local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = destination})
                                    tween:Play()
                                    tween.Completed:Wait()
                                elseif DefaultLootMethod == "Teleport" then
                                    humanoidRootPart.CFrame = destination
                                end
                                repeat
                                    if not character or not character:FindFirstChild("HumanoidRootPart") then
                                        return
                                    end
                                    wait(1)
                                    IsLooting = true
                                    local player = game.Players.LocalPlayer
                                    local character = player.Character or player.CharacterAdded:Wait()
                                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                                    local droppedItems = game:GetService("Workspace"):FindFirstChild("DroppedItems")
                                    for _, loot in pairs(droppedItems:GetChildren()) do
                                        if loot:IsA("Model") and loot.PrimaryPart and loot.PrimaryPart.Transparency < 1 then
                                            local destination = loot.PrimaryPart.CFrame
                                    if DefaultLootMethod == "Tween" then
                                        local tweenService = game:GetService("TweenService")
                                        local distance = (humanoidRootPart.Position - destination.Position).Magnitude
                                        local duration = distance / tonumber(DefaultMobMoveSpeed or 150)
                                        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                        local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = destination})
                                        tween:Play()
                                        tween.Completed:Wait()
                                    elseif DefaultLootMethod == "Teleport" then
                                        humanoidRootPart.CFrame = destination
                                    end
                                end
                            end
                                until not loot:IsDescendantOf(droppedItems) or not Loots or loot.PrimaryPart.Transparency > 1
                                IsLooting = false
                            end
                        end
                    end)
                end
            end)
        end
    end
})

local ChestsSection = MainTab:CreateSection("Loot Chest")

local LootChestMethod = {"Teleport", "Tween"}
local DefaultLootChestMethod = "Teleport"
local LootChestSpeed = {"50", "100", "150", "200"}
local DefaultLootChestSpeed = "150"

local LootMethodDropdown = MainTab:CreateDropdown({
    Name = "Loot Chest Method",
    Options = LootChestMethod,
    CurrentOption = DefaultLootChestMethod,
    MultipleOptions = false,
    Flag = "LootChest",
    Callback = function(option)
        if type(option) == "table" then
            DefaultLootChestMethod = option[1]
        else
            DefaultLootChestMethod = option
        end
    end
})

local LootMethodDropdown = MainTab:CreateDropdown({
    Name = "Loot Chest Tween Speed",
    Options = LootChestSpeed,
    CurrentOption = DefaultLootChestSpeed,
    MultipleOptions = false,
    Flag = "LootChestSpeed",
    Callback = function(option)
        if type(option) == "table" then
            DefaultLootChestSpeed = option[1]
        else
            DefaultLootChestSpeed = option
        end
    end
})

chest = false
local ChestToggle = MainTab:CreateToggle({
    Name = "Get All Chests",
    CurrentValue = false,
    Flag = "GetAllChest",
    Callback = function(Value)
        chest = Value
        if chest then
            task.spawn(function()
                while chest do
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local foundChest = false
                    task.wait()
                    pcall(function()
                        for i, v in pairs(workspace:GetDescendants()) do
                            if v.ClassName == "ProximityPrompt" and v.Parent.Name == "HumanoidRootPart" and not v.Parent.Parent:GetAttribute("OpenParticlesType") and v.Enabled and v.ActionText == "Open" and chest then
                                foundChest = true
                                GettingAllChest = true
                                repeat
                                    task.wait()
                        if not character or not character:FindFirstChild("HumanoidRootPart") then
                            return
                        end
                                    if DefaultLootChestMethod == "Tween" then
                                        local destination = v.Parent.CFrame
                                        local tweenService = game:GetService("TweenService")
                                        local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - destination.Position).Magnitude
                                        local speed = tonumber(DefaultLootChestSpeed) or 150
                                        local duration = math.max(distance / speed, 0.1)
                                        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                        local tween = tweenService:Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = destination})
                                        tween:Play()
                                        tween.Completed:Wait()
                                    elseif DefaultLootChestMethod == "Teleport" then
                                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Parent.CFrame
                                    end
                                    fireproximityprompt(v)
                                until v.Enabled == false or chest == false
                            end
                        end
                    end)
                    if MobHunt or Loots and not foundChest then
                        GettingAllChest = false
                    end
                    if not MobHunt and not Loots and not foundChest then
                        chest = false
                        if not character or not character:FindFirstChild("HumanoidRootPart") then
                            return
                        end
                        if DefaultLootChestMethod == "Tween" then
                            local destination = CFrame.new(31, 41, -303)
                            local tweenService = game:GetService("TweenService")
                            local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - destination.Position).Magnitude
                            local speed = tonumber(DefaultLootChestSpeed) or 150
                            local duration = math.max(distance / speed, 0.1)
                            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                            local tween = tweenService:Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = destination})
                            tween:Play()
                            tween.Completed:Wait()
                        elseif DefaultLootChestMethod == "Teleport" then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(31, 41, -303)
                        end
                        GettingShipTreasure = false
                    end
                end
            end)
        end
    end,
})

tchest = false
local ChestToggle = MainTab:CreateToggle({
    Name = "Get Ship Treasure",
    CurrentValue = false,
    Flag = "ShipReas",
    Callback = function(Value)
       tchest = Value
        if tchest then
            task.spawn(function()
                while tchest do
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                    if not humanoidRootPart then
                        task.wait(1)
                        return
                    end

                    local foundChest = false
                    for _, ship in pairs(workspace:GetChildren()) do
                        if ship:IsA("Model") and ship:FindFirstChildOfClass("Model") then
                            for _, chest in pairs(ship:GetChildren()) do
                                if chest:IsA("Model") and chest:FindFirstChild("Gold") then
                                    local gold = chest:FindFirstChild("Gold")
                                    local proximityPrompt = chest:FindFirstChild("HumanoidRootPart"):FindFirstChild("ProximityPrompt")

                                    if gold and gold:IsA("BasePart") and proximityPrompt then
                                        foundChest = true
                                        GettingShipTreasure = true
                                        if DefaultLootChestMethod == "Tween" then
                                            local destination = gold.CFrame
                                            local tweenService = game:GetService("TweenService")
                                            local distance = (humanoidRootPart.Position - destination.Position).Magnitude
                                            local speed = tonumber(DefaultLootChestSpeed) or 150
                                            local duration = math.max(distance / speed, 0.1)
                                            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                            local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = destination})
                                            tween:Play()
                                            tween.Completed:Wait()
                                        elseif DefaultLootChestMethod == "Teleport" then
                                            humanoidRootPart.CFrame = gold.CFrame
                                        end
                                        task.wait(0.5)
                                        pcall(function()
                                            proximityPrompt:InputHoldBegin()
                                            task.wait(1)
                                            proximityPrompt:InputHoldEnd()
                                        end)
                                        break
                                    end
                                end
                            end
                        end
                    end
                    if MobHunt or Loots and not foundChest then
                            GettingShipTreasure = false
                    end
                    if not MobHunt and not Loots and not foundChest then
                        if not character or not character:FindFirstChild("HumanoidRootPart") then
                            return
                        end
                        if DefaultLootChestMethod == "Tween" then
                            local destination = CFrame.new(31, 41, -303)
                            local tweenService = game:GetService("TweenService")
                            local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - destination.Position).Magnitude
                            local speed = tonumber(DefaultLootChestSpeed) or 150
                            local duration = math.max(distance / speed, 0.1)
                            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                            local tween = tweenService:Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = destination})
                            tween:Play()
                            tween.Completed:Wait()
                        elseif DefaultLootChestMethod == "Teleport" then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(31, 41, -303)
                        end
                        GettingShipTreasure = false
                    end
                    task.wait(1)
                end
            end)
        end
    end,
})

local TweenService = game:GetService("TweenService")
 local TpMethods = {"Instant", "Tween"}
 local DefaultTp = "Unknown"
 local Location = {
     "Smuggerler's Bay", "Nidhogg's Reach"
 }
 local DefaultLocation = "Unknown"
 local TweenSpeed = 100
 local LocationPositions = {
     ["Smuggerler's Bay"] = CFrame.new(-148, 42, -132),
     ["Nidhogg's Reach"] = CFrame.new(2101, 57, -128),
 }
 local TeleportTab = MainWindow:CreateTab("Teleport")
 local Dropdown = TeleportTab:CreateDropdown({
     Name = "Location",
     Options = Location,
     CurrentOption = "Unknown",
     MultipleOptions = false,
     Callback = function(option)
         if type(option) == "table" then
             DefaultLocation = option[1]
         else
             DefaultLocation = option
         end
         DefaultLocationPosition = LocationPositions[DefaultLocation] or CFrame.new()
         print("Selected Location: ", DefaultLocation)
         Rayfield:Notify({
             Title = "Location Selected",
             Content = "You have selected: " .. DefaultLocation,
             Duration = 6.5,
             Image = "location-pin",
         })
     end
 })
 
 
 local Dropdown = TeleportTab:CreateDropdown({
     Name = "Teleport Method",
     Options = TpMethods,
     CurrentOption = "Unknown",
     MultipleOptions = false,
     Callback = function(option)
         if type(option) == "table" then
             DefaultTp = option[1]
         else
             DefaultTp = option
         end
         print("Selected Teleport Method: ", DefaultTp)
         Rayfield:Notify({
             Title = "Teleport Method",
             Content = DefaultTp,
             Duration = 6.5,
             Image = "alarm-clock",
         })
     end
 })

 local Slider = TeleportTab:CreateSlider({
     Name = "Tween Speed",
     Range = {20, 200},
     Increment = 5,
     Suffix = "Speed",
     CurrentValue = 150,
     Flag = "Slider1",
     Callback = function(Value)
         if type(Value) == "table" then
             TweenSpeed = Value[1]
         else
             TweenSpeed = Value
         end
     end,
 })
 
local Button = TeleportTab:CreateButton({
    Name = "Press to Teleport",
    Callback = function()
        if DefaultTp == "Instant" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = DefaultLocationPosition
        elseif DefaultTp == "Tween" then
            local destination = DefaultLocationPosition
            local character = game.Players.LocalPlayer.Character
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            if humanoidRootPart and character:FindFirstChild("Humanoid") then
                local distance = (humanoidRootPart.Position - destination.Position).Magnitude
                local duration = distance / TweenSpeed
                local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = destination})
                tween:Play()
                tween.Completed:Wait()
                humanoidRootPart.CFrame = destination
            end
        end
    end
})


local Section = TeleportTab:CreateSection("Shop")
local Button = TeleportTab:CreateButton({
    Name = "Petricia's Pet",
    Callback = function()
local args = {
    [1] = "PetShop",
    [2] = "MainEntrance"
}
game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.EnterDoor:InvokeServer(unpack(args))

    end
})

local Button = TeleportTab:CreateButton({
    Name = "Tavern Interior",
    Callback = function()
local args = {
    [1] = "TavernInterior",
    [2] = "Inside"
}
game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.EnterDoor:InvokeServer(unpack(args))

    end
})

local Button = TeleportTab:CreateButton({
    Name = "Supplies Store Interior",
    Callback = function()
local args = {
    [1] = "SuppliesStoreInterior",
    [2] = "Inside"
}

game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.EnterDoor:InvokeServer(unpack(args))

    end
})

local Button = TeleportTab:CreateButton({
    Name = "Boat Shop Interior",
    Callback = function()
local args = {
    [1] = "BoatShopInterior",
    [2] = "Inside"
}

game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.EnterDoor:InvokeServer(unpack(args))

    end
})

local chests = {"stonechest", "silverchest", "goldchest", "timberchest", "crownchest", "elvenchest"}
local selectchest = "Unknown"

local Ramdomy = MainWindow:CreateTab("Gacha")
local Section = Ramdomy:CreateSection("Buy Chest")
local Dropdown = Ramdomy:CreateDropdown({
    Name = "Chest Selected",
    Options = chests,
    CurrentOption = selectchest,
    MultipleOptions = false,
    Callback = function(option)
        if type(option) == "table" then
            selectchest = option[1]
        else
            selectchest = option
        end
        Rayfield:Notify({
            Title = "Selected Chest",
            Content = selectchest,
            Duration = 6.5,
            Image = "alarm-clock",
        })
    end
})

local Button = Ramdomy:CreateButton({
    Name = "Random Skin",
    Callback = function()

local args = {
    [1] = selectchest,
    [2] = false
}

game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.OpenLootboxFunction:InvokeServer(unpack(args))

    end
})

AAutoChestRandom = false
local AutoChestRandom = Ramdomy:CreateToggle({
    Name = "Auto Random",
    CurrentValue = false,
    Flag = "AutoChestRandom",
    Callback = function(Value)
        AAutoChestRandom = Value
        if AAutoChestRandom then
            while AAutoChestRandom do
                wait()
                local args = {
                    [1] = selectchest,
                    [2] = false
                }
                
                game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.OpenLootboxFunction:InvokeServer(unpack(args))
            end
        end
    end,
 })

local Section = Ramdomy:CreateSection("Buy Pet Egg")

local petegg = {"normalegg", "royalegg", "rubyegg", "voidegg"}
local selectpet = "Unknown"
local Dropdown = Ramdomy:CreateDropdown({
    Name = "Egg Selected",
    Options = petegg,
    CurrentOption = selectpet,
    MultipleOptions = false,
    Callback = function(option)
        if type(option) == "table" then
            selectpet = option[1]
        else
            selectpet = option
        end
        Rayfield:Notify({
            Title = "Selected Chest",
            Content = selectpet,
            Duration = 6.5,
            Image = "alarm-clock",
        })
    end
})

local Button = Ramdomy:CreateButton({
    Name = "Random Pet",
    Callback = function()

local args = {
    [1] = selectpet,
    [2] = false
}

game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.OpenLootboxFunction:InvokeServer(unpack(args))

    end
})

AAutoEggRandom = false
local AutoEggRandom = Ramdomy:CreateToggle({
    Name = "Auto Random",
    CurrentValue = false,
    Flag = "AutoEggRandom",
    Callback = function(Value)
        AAutoEggRandom = Value
        if AAutoEggRandom then
            while AAutoEggRandom do
                wait()
                
local args = {
    [1] = selectpet,
    [2] = false
}

game:GetService("ReplicatedStorage").CloudFrameShared.DataStreams.OpenLootboxFunction:InvokeServer(unpack(args))

            end
        end
    end,
 })

 local Misc = MainWindow:CreateTab("Misc")
 local Playerse = Misc:CreateSection("Player")
 OceanWalker = false
 local OceanWalkers = Misc:CreateToggle({
     Name = "Walk On Water",
     CurrentValue = false,
     Flag = "OceanWalker",
     Callback = function(Value)
         OceanWalker = Value
     if OceanWalker then
         local Ocean = workspace.OceanWaves.Plane
         Ocean.CanCollide = true
     else
         local Ocean = workspace.OceanWaves.Plane
         Ocean.CanCollide = false
     end
 end
 })
 
 local Walkspeed = Misc:CreateSlider({
     Name = "Walkspeed",
     Range = {16, 200},
     Increment = 1,
     Suffix = "Speed",
     CurrentValue = 16,
     Flag = "Walkspeed",
     Callback = function(Value)
     local me = game.Players.LocalPlayer.Character.Humanoid
     me.WalkSpeed = Value
     end,
  })
 
  local JumpPower = Misc:CreateSlider({
     Name = "JumpPower",
     Range = {50, 1000},
     Increment = 10,
     Suffix = "Speed",
     CurrentValue = 50,
     Flag = "JumpPower",
     Callback = function(Value)
     local me = game.Players.LocalPlayer.Character.Humanoid
     me.JumpPower = Value
     end,
  })
 
  Fog = false
  local Fogtoggle = Misc:CreateToggle({
      Name = "No Fog",
      CurrentValue = false,
      Flag = "Fogger",
      Callback = function(Value)
          Fog = Value
          if Fog then
             local Lighting = game:GetService("Lighting")
              Lighting.FogEnd = 100000
              for i, v in pairs(Lighting:GetDescendants()) do
                  if v:IsA("Atmosphere") then
                      v:Destroy()
                  end
              end
          else
             local Lighting = game:GetService("Lighting")
              Lighting.FogEnd = 2000
              local Atmosphere = Instance.new("Atmosphere")
              Atmosphere.Parent = Lighting
          end
      end
  })
  
 
 Infjump = false
 infJumpDebounce = false
 local Infjump = Misc:CreateToggle({
     Name = "Infinite Jump",
     CurrentValue = false,
     Flag = "Infjump",
     Callback = function(Value)
         Infjump = Value
         if Infjump then
             local user = game.Players.LocalPlayer
             if infJump then infJump:Disconnect() end
             infJumpDebounce = false
             infJump = UserInputService.JumpRequest:Connect(function()
                 if not infJumpDebounce then
                     infJumpDebounce = true
                     user.Character:FindFirstChildWhichIsA("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                     wait()
                     infJumpDebounce = false
                 end
             end)
         else
             if infJump then infJump:Disconnect() end
             infJumpDebounce = false
         end
     end
 })
 
 local Server = Misc:CreateSection("Server")
 local World1 = Misc:CreateButton({
     Name = "World 1",
     Callback = function()
         local args = {
             [1] = {
                 ["islandName"] = "PortJackson",
                 ["oceanNum"] = 1
             }
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("TeleportRequestEvent"):FireServer(unpack(args))        
     end,
  })
 
  local World2 = Misc:CreateButton({
     Name = "World 2",
     Callback = function()
         local args = {
             [1] = {
                 ["islandName"] = "SmugglersBay",
                 ["oceanNum"] = 2
             }
         }
         
         game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("TeleportRequestEvent"):FireServer(unpack(args))
     end,
  })
 
  AutoW2 = false
  local AutoW2 = Misc:CreateToggle({
      Name = "Auto World 2",
      CurrentValue = false,
      Flag = "AutoW2",
      Callback = function(Value)
          AutoW2 = Value
          if AutoW2 and game.PlaceId == 2866967438 then
              wait(7)
              local args = {
                  [1] = {
                      ["islandName"] = "SmugglersBay",
                      ["oceanNum"] = 2
                  }
              }
              
              game:GetService("ReplicatedStorage"):WaitForChild("CloudFrameShared"):WaitForChild("DataStreams"):WaitForChild("TeleportRequestEvent"):FireServer(unpack(args))
          end
      end
  })
  
  local Settings = MainWindow:CreateTab("Setting")
  local Settings1 = Settings:CreateSection("Settings")
  local Autoselldelay = Settings:CreateInput({
      Name = "Auto Sell Delay(s)",
      CurrentValue = _G.AutoSellDelay,
      PlaceholderText = "Input Number",
      RemoveTextAfterFocusLost = false,
      Flag = "Autoselldelay",
      Callback = function(Text)
          local delay = tonumber(Text)
          if delay then
              _G.AutoSellDelay = delay
          else
              print("Invalid input! Please enter a valid number.")
          end
      end,
  })
  
  local FishCaughtDelay = Settings:CreateInput({
      Name = "Fish Caught Delay(s)",
      CurrentValue = _G.FishCaughtDelay,
      PlaceholderText = "Recommand 2.1",
      RemoveTextAfterFocusLost = false,
      Flag = "FishCaughtDelay",
      Callback = function(Text)
          local delay = tonumber(Text)
          if delay then
              _G.FishCaughtDelay = delay
          else
              print("Invalid input! Please enter a valid number.")
          end
      end,
  })
  
  local Section = Settings:CreateSection("Fishing V2 Config")
  
  local AutoFishv2Click = Settings:CreateInput({
      Name = "Fishing V2 Press Number",
      CurrentValue = _G.ClickFishV2Time,
      PlaceholderText = "Default 6",
      RemoveTextAfterFocusLost = false,
      Flag = "FishV2Click",
      Callback = function(Text)
          local delay = tonumber(Text)
          if delay then
              _G.ClickFishV2Time = delay
          else
              print("Invalid input! Please enter a valid number.")
          end
      end,
  })
  
  local AutoFishv2Delay = Settings:CreateInput({
      Name = "Fishing V2 Delay Per Press(s)",
      CurrentValue = _G.ClickFishV2Delay,
      PlaceholderText = "Default 0.4",
      RemoveTextAfterFocusLost = false,
      Flag = "FishV2Delay",
      Callback = function(Text)
          local delay = tonumber(Text)
          if delay then
              _G.ClickFishV2Delay = delay
          else
              print("Invalid input! Please enter a valid number.")
          end
      end,
  })
  
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")

local Section = Settings:CreateSection("Auto Rejoin")

_G.joinPs = false
local joinPs = Settings:CreateToggle({
    Name = "Auto Private Server",
    CurrentValue = false,
    Flag = "joinPs",
    Callback = function(Value)
        _G.joinPs = Value
    end
})

_G.jobID = nil
local JobIDInput = Settings:CreateInput({
    Name = "JobId  (Optional)",
    CurrentValue = _G.jobID,
    PlaceholderText = "Enter Job ID",
    RemoveTextAfterFocusLost = false,
    Flag = "jobID",
    Callback = function(Text)
        local jobID = tostring(Text)
        if jobID then
            _G.jobID = jobID
        else
            print("Invalid input! Please enter a valid job ID.")
        end
    end,
})

reconnect = false
local reconnect = Settings:CreateToggle({
    Name = "Auto Reconnect",
    CurrentValue = false,
    Flag = "reconnect",
    Callback = function(Value)
        reconnect = Value
        if reconnect and _G.joinPs then
            task.spawn(function()
                repeat task.wait() until game.CoreGui:FindFirstChild('RobloxPromptGui')

                local Players = game:GetService("Players")
                local TeleportService = game:GetService("TeleportService")
                local PlaceId = game.PlaceId
                local JobId = game.JobId
                local po = game.CoreGui.RobloxPromptGui.promptOverlay

                po.ChildAdded:Connect(function(a)
                if a.Name == 'ErrorPrompt' then
                if #Players:GetPlayers() <= 1 then
                    task.spawn(function()
                        Players.LocalPlayer:Kick("\nRejoining...")
                    task.wait(1)
                        TeleportService:Teleport(PlaceId, Players.LocalPlayer)
                    end)
                    end
                else
                    TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Players.LocalPlayer)
                end
        if reconnect and not _G.joinPs then
            task.spawn(function()
                repeat task.wait() until game.CoreGui:FindFirstChild('RobloxPromptGui')

                local lp = Players.LocalPlayer
                local po = game.CoreGui.RobloxPromptGui.promptOverlay

                po.ChildAdded:Connect(function(a)
                    if a.Name == 'ErrorPrompt' then
                        task.wait(1)

                            print("Rejoining Public Server...")
                            TeleportService:Teleport(2866967438, lp)
                        end
                end)
            end)
        end
        end)
        end)
    end
    end
})


  Rayfield:LoadConfiguration()
  
  loadstring(game:HttpGet("https://raw.githubusercontent.com/yClematiS/FishingSim2/refs/heads/main/Api"))()

  _G.searcherayfield = true
  local foundray = false
  while _G.searcherayfield and not foundray do
      task.wait(1)
      local coreGui = game:GetService("CoreGui")
      for _, v in pairs(coreGui:GetDescendants()) do
          if v.Name == "Rayfield" then
              local rayfie = v
              foundray = true
              _G.searcherayfield = false
              rayfie.Enabled = false
  
              local screenGui = Instance.new("ScreenGui")
              screenGui.Name = "ToggleRayfield"
              screenGui.Parent = coreGui
  
              local shadowframe = Instance.new("Frame")
              shadowframe.Size = UDim2.new(0, 100, 0, 100)
              shadowframe.Position = UDim2.new(0.015, 0, 0.2, 0)
              shadowframe.BackgroundTransparency = 0.8
              shadowframe.BorderSizePixel = 0
              shadowframe.BackgroundColor3 = Color3.fromRGB(153, 102, 204)
              shadowframe.Parent = screenGui
  
              local shadowcorner = Instance.new("UICorner")
              shadowcorner.CornerRadius = UDim.new(0.2, 0)
              shadowcorner.Parent = shadowframe
  
              local shadowbutton = Instance.new("ImageButton")
              shadowbutton.Size = UDim2.new(1, 0, 1, 0)
              shadowbutton.BackgroundTransparency = 1
              shadowbutton.Image = "http://www.roblox.com/asset/?id=83415391084673"
              shadowbutton.ImageColor3 = Color3.fromRGB(0,0,0)
              shadowbutton.Parent = shadowframe
  
              local frame = Instance.new("Frame")
              frame.Size = UDim2.new(0, 100, 0, 100)
              frame.Position = UDim2.new(0.015, 0, 0.2, 0)
              frame.BackgroundTransparency = 0.5
              frame.BorderSizePixel = 0
              frame.BackgroundColor3 = Color3.fromRGB(153, 102, 204)
              frame.Parent = screenGui
  
              local corner = Instance.new("UICorner")
              corner.CornerRadius = UDim.new(0.2, 0)
              corner.Parent = frame
  
              local button = Instance.new("ImageButton")
              button.Size = UDim2.new(1, 0, 1, 0)
              button.BackgroundTransparency = 1
              button.Image = "http://www.roblox.com/asset/?id=83415391084673"
              button.ImageColor3 = Color3.fromRGB(255, 255, 255)
              button.Parent = frame
              
  
              local isEnabled = false
              button.MouseButton1Click:Connect(function()
                  isEnabled = not isEnabled
                  rayfie.Enabled = isEnabled
                  local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                  local goal = {Size = UDim2.new(0, 120, 0, 120)}
                  local tween = game:GetService("TweenService"):Create(button, tweenInfo, goal)
                  tween:Play()
                  tween.Completed:Connect(function()
                      local returnTween = game:GetService("TweenService"):Create(button, tweenInfo, {Size = UDim2.new(0, 100, 0, 100)})
                      returnTween:Play()
                  end)
              end)
              local dragging = false
              local dragInput, mousePos, buttonPos
              local userInputService = game:GetService("UserInputService")
  
              button.InputBegan:Connect(function(input, gameProcessedEvent)
                  if gameProcessedEvent then return end
                  if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                      dragging = true
                      mousePos = input.Position
                      buttonPos = button.Position
                  end
              end)
  
              button.InputChanged:Connect(function(input)
                  if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                      local delta = input.Position - mousePos
                      button.Position = UDim2.new(buttonPos.X.Scale, buttonPos.X.Offset + delta.X, buttonPos.Y.Scale, buttonPos.Y.Offset + delta.Y)
                  end
              end)
  
              button.InputEnded:Connect(function(input)
                  if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                      dragging = false
                  end
              end)
              break
          end
      end
  end

  
